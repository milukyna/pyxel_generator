{
    "A.タイトル": "コーヒーゼリーキャッチャー",
    "B.注文内容との関連性": "コーヒーゼリーのゼリー部分をジャコウネコが操作して、コーヒー豆を集めつつ障害物を避けるゲームです。コーヒーゼリーの甘くてぷるぷるしたイメージと、拾うコーヒー豆を融合させて、制限時間内にどれだけ集められるかを楽しむアクションゲームとなっています。",
    "C.python": "import pyxel\nimport random\n\nWIDTH, HEIGHT = 160, 120\nMAX_LIVES = 3\nSPAWN_INTERVAL = 20\nSPEED = 2\n\nclass CoffeeJellyCatcher:\n    def reset(self):\n        self.cat_x = WIDTH // 2\n        self.cat_y = HEIGHT - 20\n        self.lives = MAX_LIVES\n        self.score = 0\n        self.beans = []  # list of [x, y]\n        self.obstacles = []  # list of [x, y]\n        self.spawn_counter = 0\n        self.game_over = False\n\n    def __init__(self):\n        pyxel.init(WIDTH, HEIGHT, title=\"コーヒーゼリーキャッチャー\")\n        pyxel.image(0).load(0, 0, \"../assets/img/cat.png\")\n        pyxel.image(0).load(16, 0, \"../assets/img/bean.png\")\n        pyxel.image(0).load(32, 0, \"../assets/img/obstacle.png\")\n        self.reset()\n        pyxel.run(self.update, self.draw)\n\n    def update(self):\n        if self.game_over:\n            if pyxel.btnp(pyxel.KEY_R):\n                self.reset()\n            return\n\n        # スペースキーでジャンプ\n        if pyxel.btnp(pyxel.KEY_SPACE) and self.cat_y == HEIGHT - 20:\n            self.cat_vy = -6\n        else:\n            if not hasattr(self, 'cat_vy'):\n                self.cat_vy = 0\n\n        # 重力とジャンプ処理\n        self.cat_vy += 0.3\n        self.cat_y += self.cat_vy\n\n        if self.cat_y >= HEIGHT - 20:\n            self.cat_y = HEIGHT - 20\n            self.cat_vy = 0\n\n        # 出現処理\n        self.spawn_counter += 1\n        if self.spawn_counter > SPAWN_INTERVAL:\n            self.spawn_counter = 0\n            # 豆か障害物をランダムに生成\n            if random.random() < 0.7:\n                x = random.randint(0, WIDTH - 16)\n                self.beans.append([x, 0])\n            else:\n                x = random.randint(0, WIDTH - 16)\n                self.obstacles.append([x, 0])\n\n        # 落下処理と当たり判定\n        for b in self.beans[:]:\n            b[1] += SPEED\n            if self.check_collision(self.cat_x, self.cat_y, b[0], b[1]):\n                self.beans.remove(b)\n                self.score += 1\n            elif b[1] > HEIGHT:\n                self.beans.remove(b)\n\n        for o in self.obstacles[:]:\n            o[1] += SPEED\n            if self.check_collision(self.cat_x, self.cat_y, o[0], o[1]):\n                self.obstacles.remove(o)\n                self.lives -= 1\n                if self.lives <= 0:\n                    self.game_over = True\n            elif o[1] > HEIGHT:\n                self.obstacles.remove(o)\n\n    def check_collision(self, x1, y1, x2, y2):\n        return (x1 < x2 + 16 and x1 + 16 > x2 and y1 < y2 + 16 and y1 + 16 > y2)\n\n    def draw(self):\n        pyxel.cls(7)  # 薄い背景色\n        # ネコを描く\n        pyxel.blt(self.cat_x, int(self.cat_y), 0, 0, 0, 16, 16, 0)\n        # 豆を描く\n        for b in self.beans:\n            pyxel.blt(b[0], b[1], 0, 16, 0, 16, 16, 0)\n        # 障害物を描く\n        for o in self.obstacles:\n            pyxel.blt(o[0], o[1], 0, 32, 0, 16, 16, 0)\n        # ライフ表示\n        pyxel.text(5, 5, f\"Lives: {self.lives}\", 8)\n        # スコア表示\n        pyxel.text(5, 15, f\"Score: {self.score}\", 8)\n        # ゲームオーバー表示\n        if self.game_over:\n            pyxel.text(WIDTH//2 - 40, HEIGHT//2, \"GAME OVER\", 8)\n            pyxel.text(WIDTH//2 - 50, HEIGHT//2 + 10, \"Press R to Restart\", pyxel.frame_count % 16)\n\nCoffeeJellyCatcher()"
}